{"ast":null,"code":"import { tap } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class AuthService {\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n    this.apiUrl = 'http://localhost:3000/api/auth';\n    this.tokenKey = 'task_app_token';\n    this.userKey = 'task_app_user';\n  }\n  register(user) {\n    return this.http.post(`${this.apiUrl}/register`, user);\n  }\n  login(credentials) {\n    return this.http.post(`${this.apiUrl}/login`, credentials).pipe(tap(response => {\n      this.setToken(response.token);\n      this.setUser(response.user);\n    }));\n  }\n  logout() {\n    localStorage.removeItem(this.tokenKey);\n    localStorage.removeItem(this.userKey);\n    this.router.navigate(['/login']);\n  }\n  setToken(token) {\n    localStorage.setItem(this.tokenKey, token);\n  }\n  getToken() {\n    return localStorage.getItem(this.tokenKey);\n  }\n  setUser(user) {\n    localStorage.setItem(this.userKey, JSON.stringify(user));\n  }\n  getUser() {\n    const user = localStorage.getItem(this.userKey);\n    return user ? JSON.parse(user) : null;\n  }\n  isLoggedIn() {\n    return !!this.getToken();\n  }\n  static {\n    this.ɵfac = function AuthService_Factory(t) {\n      return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["tap","AuthService","constructor","http","router","apiUrl","tokenKey","userKey","register","user","post","login","credentials","pipe","response","setToken","token","setUser","logout","localStorage","removeItem","navigate","setItem","getToken","getItem","JSON","stringify","getUser","parse","isLoggedIn","i0","ɵɵinject","i1","HttpClient","i2","Router","factory","ɵfac","providedIn"],"sources":["C:\\Users\\RC BBB\\GoodApps Inc\\Angular v16\\FastTask\\frontend\\src\\app\\auth\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Router } from '@angular/router';\r\nimport { Observable, tap } from 'rxjs';\r\nimport { User } from '../interfaces/user.interface';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n    private apiUrl = 'http://localhost:3000/api/auth';\r\n    private tokenKey = 'task_app_token';\r\n    private userKey = 'task_app_user';\r\n\r\n    constructor(private http: HttpClient, private router: Router) { }\r\n\r\n    register(user: { username: string; email: string; password: string }): Observable<any> {\r\n        return this.http.post(`${this.apiUrl}/register`, user);\r\n    }\r\n\r\n    login(credentials: { username: string; password: string }): Observable<any> {\r\n        return this.http.post(`${this.apiUrl}/login`, credentials).pipe(\r\n            tap((response: any) => {\r\n                this.setToken(response.token);\r\n                this.setUser(response.user);\r\n            })\r\n        );\r\n    }\r\n\r\n    logout(): void {\r\n        localStorage.removeItem(this.tokenKey);\r\n        localStorage.removeItem(this.userKey);\r\n        this.router.navigate(['/login']);\r\n    }\r\n\r\n    setToken(token: string): void {\r\n        localStorage.setItem(this.tokenKey, token);\r\n    }\r\n\r\n    getToken(): string | null {\r\n        return localStorage.getItem(this.tokenKey);\r\n    }\r\n\r\n    setUser(user: User): void {\r\n        localStorage.setItem(this.userKey, JSON.stringify(user));\r\n    }\r\n\r\n    getUser(): User | null {\r\n        const user = localStorage.getItem(this.userKey);\r\n        return user ? JSON.parse(user) : null;\r\n    }\r\n\r\n    isLoggedIn(): boolean {\r\n        return !!this.getToken();\r\n    }\r\n}"],"mappings":"AAGA,SAAqBA,GAAG,QAAQ,MAAM;;;;AAMtC,OAAM,MAAOC,WAAW;EAKpBC,YAAoBC,IAAgB,EAAUC,MAAc;IAAxC,KAAAD,IAAI,GAAJA,IAAI;IAAsB,KAAAC,MAAM,GAANA,MAAM;IAJ5C,KAAAC,MAAM,GAAG,gCAAgC;IACzC,KAAAC,QAAQ,GAAG,gBAAgB;IAC3B,KAAAC,OAAO,GAAG,eAAe;EAE+B;EAEhEC,QAAQA,CAACC,IAA2D;IAChE,OAAO,IAAI,CAACN,IAAI,CAACO,IAAI,CAAC,GAAG,IAAI,CAACL,MAAM,WAAW,EAAEI,IAAI,CAAC;EAC1D;EAEAE,KAAKA,CAACC,WAAmD;IACrD,OAAO,IAAI,CAACT,IAAI,CAACO,IAAI,CAAC,GAAG,IAAI,CAACL,MAAM,QAAQ,EAAEO,WAAW,CAAC,CAACC,IAAI,CAC3Db,GAAG,CAAEc,QAAa,IAAI;MAClB,IAAI,CAACC,QAAQ,CAACD,QAAQ,CAACE,KAAK,CAAC;MAC7B,IAAI,CAACC,OAAO,CAACH,QAAQ,CAACL,IAAI,CAAC;IAC/B,CAAC,CAAC,CACL;EACL;EAEAS,MAAMA,CAAA;IACFC,YAAY,CAACC,UAAU,CAAC,IAAI,CAACd,QAAQ,CAAC;IACtCa,YAAY,CAACC,UAAU,CAAC,IAAI,CAACb,OAAO,CAAC;IACrC,IAAI,CAACH,MAAM,CAACiB,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;EACpC;EAEAN,QAAQA,CAACC,KAAa;IAClBG,YAAY,CAACG,OAAO,CAAC,IAAI,CAAChB,QAAQ,EAAEU,KAAK,CAAC;EAC9C;EAEAO,QAAQA,CAAA;IACJ,OAAOJ,YAAY,CAACK,OAAO,CAAC,IAAI,CAAClB,QAAQ,CAAC;EAC9C;EAEAW,OAAOA,CAACR,IAAU;IACdU,YAAY,CAACG,OAAO,CAAC,IAAI,CAACf,OAAO,EAAEkB,IAAI,CAACC,SAAS,CAACjB,IAAI,CAAC,CAAC;EAC5D;EAEAkB,OAAOA,CAAA;IACH,MAAMlB,IAAI,GAAGU,YAAY,CAACK,OAAO,CAAC,IAAI,CAACjB,OAAO,CAAC;IAC/C,OAAOE,IAAI,GAAGgB,IAAI,CAACG,KAAK,CAACnB,IAAI,CAAC,GAAG,IAAI;EACzC;EAEAoB,UAAUA,CAAA;IACN,OAAO,CAAC,CAAC,IAAI,CAACN,QAAQ,EAAE;EAC5B;;;uBA7CStB,WAAW,EAAA6B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,MAAA;IAAA;EAAA;;;aAAXlC,WAAW;MAAAmC,OAAA,EAAXnC,WAAW,CAAAoC,IAAA;MAAAC,UAAA,EAFR;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}